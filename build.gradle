plugins {
	id "eclipse"
	id "idea"
	id "maven-publish"
	id "net.minecraftforge.gradle" version "[6.0,6.2)"
	id "org.spongepowered.mixin" version "0.7.+"
}

version = "${MinecraftVersion}-${ModVersion}"
group = "net.luis.xsurvive"

base {
	archivesName = "XSurvive"
}

minecraft {
	mappings channel: "official", version: MinecraftVersion
	copyIdeResources = true
	accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
	
	runs {
		client {
			workingDirectory project.file("run")
			
			property "forge.logging.markers", "REGISTRIES"
			property "forge.logging.console.level", "debug"
			property "forge.enabledGameTestNamespaces", "xsurvive"
			property "mixin.env.remapRefMap", "true"
			property "mixin.env.refMapRemappingFile", "${buildDir}/createSrgToMcp/output.srg"
			
			mods {
				examplemod {
					source sourceSets.main
				}
			}
		}
		
		serverClient {
			parent runs.client
			
			args "--username", "Dev2"
		}
		
		server {
			workingDirectory project.file("run")
			
			property "forge.logging.markers", "REGISTRIES"
			property "forge.logging.console.level", "debug"
			property "forge.enabledGameTestNamespaces", "xsurvive"
			property "mixin.env.remapRefMap", "true"
			property "mixin.env.refMapRemappingFile", "${buildDir}/createSrgToMcp/output.srg"
			property "forge.logging.mojang.level", "debug"
			
			mods {
				examplemod {
					source sourceSets.main
				}
			}
		}
		
		gameTestServer {
			workingDirectory project.file("run")
			
			property "forge.logging.markers", "REGISTRIES"
			property "forge.logging.console.level", "debug"
			property "forge.enabledGameTestNamespaces", "xsurvive"
			property "mixin.env.remapRefMap", "true"
			property "mixin.env.refMapRemappingFile", "${buildDir}/createSrgToMcp/output.srg"
			
			mods {
				examplemod {
					source sourceSets.main
				}
			}
		}
		
		data {
			workingDirectory project.file("run")
			
			property "forge.logging.markers", "REGISTRIES"
			property "forge.logging.console.level", "debug"
			property "forge.enabledGameTestNamespaces", "xsurvive"
			property "mixin.env.remapRefMap", "true"
			property "mixin.env.refMapRemappingFile", "${buildDir}/createSrgToMcp/output.srg"
			
			args "--mod", "xsurvive", "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")
			
			mods {
				examplemod {
					source sourceSets.main
				}
			}
		}
	}
}

mixin {
	add sourceSets.main, "mixins.xsurvive.refmap.json"
	config "xsurvive.mixins.json"
	debug.export = true
}

sourceSets.main.resources {srcDir "src/generated/resources"}

repositories {
	maven {
		name = "Progwml6 maven"
		url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		name = "ModMaven"
		url = "https://modmaven.dev"
	}
	maven {
		url "https://cursemaven.com"
	}
	maven {
		url uri("${projectDir}/maven/repositories")
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${MinecraftVersion}-${ForgeVersion}"
	
	annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
	
	implementation fg.deobf("net.luis.xbackpack:Forge-XBackpack:${MinecraftVersion}-${XBackpackVersion}")
	implementation fg.deobf("net.luis.xores:Forge-XOres:${MinecraftVersion}-${XOresVersion}")
	
	compileOnly fg.deobf("mezz.jei:jei-${MinecraftVersion}-common-api:${JeiVersion}")
	compileOnly fg.deobf("mezz.jei:jei-${MinecraftVersion}-forge-api:${JeiVersion}")
	runtimeOnly fg.deobf("mezz.jei:jei-${MinecraftVersion}-forge:${JeiVersion}")
}

def resourceTargets = ["META-INF/mods.toml", "pack.mcmeta"]
def replaceProperties = [
	MinecraftVersion: MinecraftVersion, MinecraftVersionRange: MinecraftVersionRange,
	ForgeVersion    : ForgeVersion, ForgeVersionRange: ForgeVersionRange,
	ForgeLoaderRange: ForgeLoaderRange, ModVersion: ModVersion,
	XBackpackVersion: XBackpackVersion, XOresVersion: XOresVersion
]
processResources {
	inputs.properties replaceProperties
	replaceProperties.put "project", project
	
	filesMatching(resourceTargets) {
		expand replaceProperties
	}
}

jar {
	manifest {
		attributes([
			"Specification-Title"     : "XSurvive",
			"Specification-Version"   : "${MinecraftVersion}-${ModVersion}",
			"Implementation-Title"    : project.name,
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd HH:mm:ssZ")
		])
	}
}

jar.finalizedBy("reobfJar")

java {
	withSourcesJar()
}

artifacts {
	archives sourcesJar
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact jar
			artifact sourcesJar
		}
	}
	
	repositories {
		maven {
			url uri("${projectDir}/maven/repositories")
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
}
